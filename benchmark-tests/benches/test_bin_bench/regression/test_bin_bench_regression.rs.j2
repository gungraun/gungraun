use iai_callgrind::{
    binary_benchmark, binary_benchmark_group, main, BinaryBenchmarkConfig, EventKind,
    Callgrind, ValgrindTool, Cachegrind, CachegrindMetric
};

#[binary_benchmark]
#[bench::regress_callgrind(
    args = [{{ array_length }}],
    config = BinaryBenchmarkConfig::default()
        .tool(Callgrind::default()
            .soft_limits([(EventKind::Ir, 0.0)]).fail_fast({{ fail_fast }})
        )
)]
#[bench::regress_cachegrind(
    args = [{{ array_length }}],
    config = BinaryBenchmarkConfig::default()
        .default_tool(ValgrindTool::Cachegrind)
        .tool(Cachegrind::default()
            .soft_limits([(CachegrindMetric::Ir, 0.0)]).fail_fast({{ fail_fast }})
        )
)]
#[bench::should_not_run_after_regression(10)]
fn bench_bubble_sort(start: i32) -> iai_callgrind::Command {
    iai_callgrind::Command::new(env!("CARGO_BIN_EXE_bubble-sort"))
        .arg(start.to_string())
        .build()
}

binary_benchmark_group!(
    name = bench_group;
    benchmarks = bench_bubble_sort
);

main!(binary_benchmark_groups = bench_group);
