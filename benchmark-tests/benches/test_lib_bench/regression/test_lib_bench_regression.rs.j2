use std::hint::black_box;

use benchmark_tests::{bubble_sort, setup_worst_case_array};
use iai_callgrind::{
    library_benchmark, library_benchmark_group, main, EventKind, LibraryBenchmarkConfig,
    Callgrind, ValgrindTool, Cachegrind, CachegrindMetric, Dhat, DhatMetric, Limit
};

#[cfg(target_os = "freebsd")]
fn get_cachegrind_hard_limits() -> Vec<(CachegrindMetric, Limit)> {
    vec![(CachegrindMetric::Ir, {{ cachegrind_hard_limit | default("Limit::Int(1_500_000)") }} )]
}

#[cfg(not(target_os = "freebsd"))]
fn get_cachegrind_hard_limits() -> Vec<(CachegrindMetric, Limit)> {
    vec![(CachegrindMetric::Ir, {{ cachegrind_hard_limit | default("Limit::Int(500_000)") }} )]
}

#[library_benchmark]
#[bench::regress_callgrind(
    args = [{{ callgrind_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .tool(Callgrind::default()
            .soft_limits([(EventKind::Ir, 0.0)]).fail_fast({{ callgrind_fail_fast | default(false) }})
        )
)]
#[bench::regress_cachegrind(
    args = [{{ cachegrind_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .default_tool(ValgrindTool::Cachegrind)
        .tool(Cachegrind::default()
            .soft_limits([(CachegrindMetric::Ir, 0.0)]).fail_fast({{ cachegrind_fail_fast | default(false) }})
        )
)]
#[bench::regress_dhat(
    args = [{{ dhat_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .default_tool(ValgrindTool::DHAT)
        .tool(Dhat::default()
            .soft_limits([(DhatMetric::TotalBytes, 0.0)]).fail_fast({{ dhat_fail_fast | default(false) }})
            .frames(["*::setup_worst_case_array"])
        )
)]
#[bench::should_not_run_after_regression(setup_worst_case_array(10))]
fn bench_bubble_sort_soft_limits(array: Vec<i32>) -> Vec<i32> {
    black_box(bubble_sort(array))
}

#[library_benchmark]
#[bench::regress_callgrind(
    args = [{{ callgrind_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .tool(Callgrind::default()
            .hard_limits([(EventKind::Ir, {{ callgrind_hard_limit | default(200) }} )]).fail_fast({{ callgrind_fail_fast | default(false) }})
        )
)]
#[bench::regress_cachegrind(
    args = [{{ cachegrind_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .default_tool(ValgrindTool::Cachegrind)
        .tool(Cachegrind::default()
            .hard_limits(get_cachegrind_hard_limits()).fail_fast({{ cachegrind_fail_fast | default(false) }})
        )
)]
#[bench::regress_dhat(
    args = [{{ dhat_array_length | default(4) }}],
    setup = setup_worst_case_array,
    config = LibraryBenchmarkConfig::default()
        .default_tool(ValgrindTool::DHAT)
        .tool(Dhat::default()
            .hard_limits([(DhatMetric::TotalBytes, {{ dhat_hard_limit | default(16) }})]).fail_fast({{ dhat_fail_fast | default(false) }})
            .frames(["*::setup_worst_case_array"])
        )
)]
#[bench::should_not_run_after_regression(setup_worst_case_array(10))]
fn bench_bubble_sort_hard_limits(array: Vec<i32>) -> Vec<i32> {
    black_box(bubble_sort(array))
}

library_benchmark_group!(
    name = bench_group;
    benchmarks = bench_bubble_sort_soft_limits, bench_bubble_sort_hard_limits
);

main!(library_benchmark_groups = bench_group);
