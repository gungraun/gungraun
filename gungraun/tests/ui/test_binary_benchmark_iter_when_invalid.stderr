error: Only one parameter of `file`, `args` or `iter` can be present
 --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:7:16
  |
7 |     #[benches::some(iter = 1..=2, args = [0, 1])]
  |                ^^^^

error: Duplicate argument: `iter`

         = help: `iter` is allowed only once

  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:17:35
   |
17 |     #[benches::some(iter = 1..=2, iter = vec![0, 1])]
   |                                   ^^^^^^^^^^^^^^^^^

error: The benchmark function can only take exactly one argument if the iter parameter is present

         = help: fn benchmark_function(arg: String) ...
         = note: If you need more than one argument you can use a tuple as input and
           destruct it in the function signature. Example:

           #[benches::some_id(iter = vec![(1, 2)])]
           fn benchmark_function((first, second): (u64, u64)) -> usize { ... }

  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:28:8
   |
28 |     fn bench_10() -> gungraun::Command {
   |        ^^^^^^^^

error: The benchmark function can only take exactly one argument if the iter parameter is present

         = help: fn benchmark_function(arg: String) ...
         = note: If you need more than one argument you can use a tuple as input and
           destruct it in the function signature. Example:

           #[benches::some_id(iter = vec![(1, 2)])]
           fn benchmark_function((first, second): (u64, u64)) -> usize { ... }

  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:63:8
   |
63 |     fn bench_10(a: u64, b: u64) -> gungraun::Command {
   |        ^^^^^^^^

error[E0689]: can't call method `into_iter` on ambiguous numeric type `{integer}`
  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:51:5
   |
51 |     #[binary_benchmark]
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `binary_benchmark` (in Nightly builds, run with -Z macro-backtrace for more info)
help: you must specify a type for this binding, like `i32`
   |
51 |     #[binary_benchmark]: i32
   |                        +++++

error[E0308]: mismatched types
  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:71:5
   |
71 |     #[binary_benchmark]
   |     ^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
   |     |
   |     expected `String`, found integer
72 |     #[benches::some(iter = 1..=2)]
73 |     fn bench_10(a: String) -> gungraun::Command {
   |        -------- arguments to this function are incorrect
   |
note: function defined here
  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:73:8
   |
73 |     fn bench_10(a: String) -> gungraun::Command {
   |        ^^^^^^^^ ---------
   = note: this error originates in the attribute macro `binary_benchmark` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:85:5
   |
85 |     #[binary_benchmark]
   |     ^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
   |     |
   |     expected `String`, found integer
86 |     #[benches::some(iter = 1..=2, setup = setup)]
   |                                           ----- arguments to this function are incorrect
   |
note: function defined here
  --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:81:8
   |
81 |     fn setup(a: String) -> u64 {
   |        ^^^^^ ---------
   = note: this error originates in the attribute macro `binary_benchmark` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:99:5
    |
99  |     #[binary_benchmark]
    |     ^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |     |
    |     expected `String`, found integer
100 |     #[benches::some(iter = 1..=2, teardown = teardown)]
    |                                              -------- arguments to this function are incorrect
    |
note: function defined here
   --> tests/ui/test_binary_benchmark_iter_when_invalid.rs:95:8
    |
95  |     fn teardown(a: String) -> u64 {
    |        ^^^^^^^^ ---------
    = note: this error originates in the attribute macro `binary_benchmark` (in Nightly builds, run with -Z macro-backtrace for more info)
