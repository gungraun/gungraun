{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BenchmarkSummary",
  "description": "The `BenchmarkSummary` containing all the information of a single benchmark run\n\n This includes produced files, recorded callgrind events, performance regressions ...",
  "type": "object",
  "properties": {
    "benchmark_exe": {
      "description": "The path to the binary which is executed by valgrind. In case of a library benchmark this\n is the compiled benchmark file. In case of a binary benchmark this is the path to the\n command.",
      "type": "string"
    },
    "benchmark_file": {
      "description": "The path to the benchmark file",
      "type": "string"
    },
    "callgrind_summary": {
      "description": "The summary of the callgrind run",
      "anyOf": [
        {
          "$ref": "#/definitions/CallgrindSummary"
        },
        {
          "type": "null"
        }
      ]
    },
    "details": {
      "description": "More details describing this benchmark run",
      "type": ["string", "null"]
    },
    "function_name": {
      "description": "The name of the function under test",
      "type": "string"
    },
    "id": {
      "description": "The user provided id of this benchmark",
      "type": ["string", "null"]
    },
    "kind": {
      "description": "Whether this summary describes a library or binary benchmark",
      "allOf": [
        {
          "$ref": "#/definitions/BenchmarkKind"
        }
      ]
    },
    "module_path": {
      "description": "The rust path in the form `bench_file::group::bench`",
      "type": "string"
    },
    "package_dir": {
      "description": "The directory of the package",
      "type": "string"
    },
    "project_root": {
      "description": "The project's root directory",
      "type": "string"
    },
    "summary_output": {
      "description": "The destination and kind of the summary file",
      "anyOf": [
        {
          "$ref": "#/definitions/SummaryOutput"
        },
        {
          "type": "null"
        }
      ]
    },
    "tool_summaries": {
      "description": "The summary of other valgrind tool runs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ToolSummary"
      }
    },
    "version": {
      "description": "The version of this format. Only backwards incompatible changes cause an increase of the\n version",
      "type": "string"
    }
  },
  "required": [
    "version",
    "kind",
    "project_root",
    "package_dir",
    "benchmark_file",
    "benchmark_exe",
    "function_name",
    "module_path",
    "tool_summaries"
  ],
  "definitions": {
    "Baseline": {
      "description": "A `Baseline` depending on the [`BaselineKind`] which points to the corresponding path\n\n This baseline is used for comparisons with the new output of valgrind tools.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of the `Baseline`",
          "allOf": [
            {
              "$ref": "#/definitions/BaselineKind"
            }
          ]
        },
        "path": {
          "description": "The path to the file which is used to compare against the new output",
          "type": "string"
        }
      },
      "required": ["kind", "path"]
    },
    "BaselineKind": {
      "description": "The `BaselineKind` describing the baseline",
      "oneOf": [
        {
          "description": "Compare new against `*.old` output files",
          "type": "string",
          "const": "Old"
        },
        {
          "description": "Compare new against a named baseline",
          "type": "object",
          "properties": {
            "Name": {
              "$ref": "#/definitions/BaselineName"
            }
          },
          "additionalProperties": false,
          "required": ["Name"]
        }
      ]
    },
    "BaselineName": {
      "type": "string"
    },
    "BenchmarkKind": {
      "description": "The `BenchmarkKind`, differentiating between library and binary benchmarks",
      "oneOf": [
        {
          "description": "A library benchmark",
          "type": "string",
          "const": "LibraryBenchmark"
        },
        {
          "description": "A binary benchmark",
          "type": "string",
          "const": "BinaryBenchmark"
        }
      ]
    },
    "CallgrindRegression": {
      "description": "The `CallgrindRegression` describing a single event based performance regression",
      "type": "object",
      "properties": {
        "diff_pct": {
          "description": "The difference between new and old in percent. Serialized as string to preserve infinity\n values and avoid null in json.",
          "type": "string"
        },
        "event_kind": {
          "description": "The [`EventKind`] which is affected by a performance regression",
          "allOf": [
            {
              "$ref": "#/definitions/EventKind"
            }
          ]
        },
        "limit": {
          "description": "The value of the limit which was exceeded to cause a performance regression. Serialized as\n string to preserve infinity values and avoid null in json.",
          "type": "string"
        },
        "new": {
          "description": "The value of the new benchmark run",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        },
        "old": {
          "description": "The value of the old benchmark run",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        }
      },
      "required": ["event_kind", "new", "old", "diff_pct", "limit"]
    },
    "CallgrindRun": {
      "description": "The `CallgrindRun` contains all `CallgrindRunSegments` and their total costs in a\n `CallgrindTotal`.",
      "type": "object",
      "properties": {
        "segments": {
          "description": "All `CallgrindRunSummary`s",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallgrindRunSegment"
          }
        },
        "total": {
          "description": "The total costs of all `CallgrindRunSummary`s in this `CallgrindRunSummaries`",
          "allOf": [
            {
              "$ref": "#/definitions/CallgrindTotal"
            }
          ]
        }
      },
      "required": ["segments", "total"]
    },
    "CallgrindRunSegment": {
      "description": "The `CallgrindRunSegment` containing the metric differences, performance regressions of a\n callgrind run segment.\n\n A segment can be a part (caused by options like `--dump-every-bb=xxx`), a thread (caused by\n `--separate-threads`) or a pid (possibly caused by `--trace-children`). A segment is a summary\n over a single file which contains the costs of that part, thread and/or pid.",
      "type": "object",
      "properties": {
        "baseline": {
          "description": "If present, the `Baseline` used to compare the new with the old output",
          "anyOf": [
            {
              "$ref": "#/definitions/Baseline"
            },
            {
              "type": "null"
            }
          ]
        },
        "command": {
          "description": "The executed command extracted from Valgrind output",
          "type": "string"
        },
        "events": {
          "description": "All recorded metrics for the `EventKinds`",
          "allOf": [
            {
              "$ref": "#/definitions/MetricsSummary_for_EventKind"
            }
          ]
        },
        "regressions": {
          "description": "All detected performance regressions per callgrind run",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallgrindRegression"
          }
        }
      },
      "required": ["command", "events", "regressions"]
    },
    "CallgrindSummary": {
      "description": "The `CallgrindSummary` contains the callgrind run, flamegraph paths and other paths to the\n segments of the callgrind run.",
      "type": "object",
      "properties": {
        "callgrind_run": {
          "description": "The summary of all callgrind segments is a `CallgrindRun`",
          "allOf": [
            {
              "$ref": "#/definitions/CallgrindRun"
            }
          ]
        },
        "flamegraphs": {
          "description": "The summaries of possibly created flamegraphs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlamegraphSummary"
          }
        },
        "log_paths": {
          "description": "The paths to the `*.log` files",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "out_paths": {
          "description": "The paths to the `*.out` files",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["log_paths", "out_paths", "flamegraphs", "callgrind_run"]
    },
    "CallgrindTotal": {
      "description": "The total callgrind costs over the `CallgrindRunSegments` and all detected regressions for the\n total",
      "type": "object",
      "properties": {
        "regressions": {
          "description": "All detected regressions for the total metrics",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallgrindRegression"
          }
        },
        "summary": {
          "description": "The total over the segment metrics",
          "allOf": [
            {
              "$ref": "#/definitions/MetricsSummary_for_EventKind"
            }
          ]
        }
      },
      "required": ["summary", "regressions"]
    },
    "Diffs": {
      "description": "The differences between two `Metrics` as percentage and factor",
      "type": "object",
      "properties": {
        "diff_pct": {
          "description": "The percentage of the difference between two `Metrics` serialized as string to preserve\n infinity values and avoid `null` in json",
          "type": "string"
        },
        "factor": {
          "description": "The factor of the difference between two `Metrics` serialized as string to preserve\n infinity values and void `null` in json",
          "type": "string"
        }
      },
      "required": ["diff_pct", "factor"]
    },
    "EitherOrBoth_for_SegmentDetails": {
      "description": "Either left or right or both can be present\n\n Most of the time, this enum is used to store (new, old) output, metrics, etc. Per convention\n left is `new` and right is `old`.",
      "oneOf": [
        {
          "description": "The left or `new` value",
          "type": "object",
          "properties": {
            "Left": {
              "$ref": "#/definitions/SegmentDetails"
            }
          },
          "additionalProperties": false,
          "required": ["Left"]
        },
        {
          "description": "The right or `old` value",
          "type": "object",
          "properties": {
            "Right": {
              "$ref": "#/definitions/SegmentDetails"
            }
          },
          "additionalProperties": false,
          "required": ["Right"]
        },
        {
          "description": "Both values (`new` and `old`) are present",
          "type": "object",
          "properties": {
            "Both": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/SegmentDetails"
                },
                {
                  "$ref": "#/definitions/SegmentDetails"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false,
          "required": ["Both"]
        }
      ]
    },
    "EitherOrBoth_for_uint64": {
      "description": "Either left or right or both can be present\n\n Most of the time, this enum is used to store (new, old) output, metrics, etc. Per convention\n left is `new` and right is `old`.",
      "oneOf": [
        {
          "description": "The left or `new` value",
          "type": "object",
          "properties": {
            "Left": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": ["Left"]
        },
        {
          "description": "The right or `old` value",
          "type": "object",
          "properties": {
            "Right": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": ["Right"]
        },
        {
          "description": "Both values (`new` and `old`) are present",
          "type": "object",
          "properties": {
            "Both": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false,
          "required": ["Both"]
        }
      ]
    },
    "EventKind": {
      "description": "All `EventKind`s callgrind produces and additionally some derived events\n\n Depending on the options passed to Callgrind, these are the events that Callgrind can produce.\n See the [Callgrind\n documentation](https://valgrind.org/docs/manual/cl-manual.html#cl-manual.options) for details.",
      "oneOf": [
        {
          "description": "The default event. I cache reads (which equals the number of instructions executed)",
          "type": "string",
          "const": "Ir"
        },
        {
          "description": "D Cache reads (which equals the number of memory reads) (--cache-sim=yes)",
          "type": "string",
          "const": "Dr"
        },
        {
          "description": "D Cache writes (which equals the number of memory writes) (--cache-sim=yes)",
          "type": "string",
          "const": "Dw"
        },
        {
          "description": "I1 cache read misses (--cache-sim=yes)",
          "type": "string",
          "const": "I1mr"
        },
        {
          "description": "D1 cache read misses (--cache-sim=yes)",
          "type": "string",
          "const": "D1mr"
        },
        {
          "description": "D1 cache write misses (--cache-sim=yes)",
          "type": "string",
          "const": "D1mw"
        },
        {
          "description": "LL cache instruction read misses (--cache-sim=yes)",
          "type": "string",
          "const": "ILmr"
        },
        {
          "description": "LL cache data read misses (--cache-sim=yes)",
          "type": "string",
          "const": "DLmr"
        },
        {
          "description": "LL cache data write misses (--cache-sim=yes)",
          "type": "string",
          "const": "DLmw"
        },
        {
          "description": "Derived event showing the L1 hits (--cache-sim=yes)",
          "type": "string",
          "const": "L1hits"
        },
        {
          "description": "Derived event showing the LL hits (--cache-sim=yes)",
          "type": "string",
          "const": "LLhits"
        },
        {
          "description": "Derived event showing the RAM hits (--cache-sim=yes)",
          "type": "string",
          "const": "RamHits"
        },
        {
          "description": "Derived event showing the total amount of cache reads and writes (--cache-sim=yes)",
          "type": "string",
          "const": "TotalRW"
        },
        {
          "description": "Derived event showing estimated CPU cycles (--cache-sim=yes)",
          "type": "string",
          "const": "EstimatedCycles"
        },
        {
          "description": "The number of system calls done (--collect-systime=yes)",
          "type": "string",
          "const": "SysCount"
        },
        {
          "description": "The elapsed time spent in system calls (--collect-systime=yes)",
          "type": "string",
          "const": "SysTime"
        },
        {
          "description": "The cpu time spent during system calls (--collect-systime=nsec)",
          "type": "string",
          "const": "SysCpuTime"
        },
        {
          "description": "The number of global bus events (--collect-bus=yes)",
          "type": "string",
          "const": "Ge"
        },
        {
          "description": "Conditional branches executed (--branch-sim=yes)",
          "type": "string",
          "const": "Bc"
        },
        {
          "description": "Conditional branches mispredicted (--branch-sim=yes)",
          "type": "string",
          "const": "Bcm"
        },
        {
          "description": "Indirect branches executed (--branch-sim=yes)",
          "type": "string",
          "const": "Bi"
        },
        {
          "description": "Indirect branches mispredicted (--branch-sim=yes)",
          "type": "string",
          "const": "Bim"
        },
        {
          "description": "Dirty miss because of instruction read (--simulate-wb=yes)",
          "type": "string",
          "const": "ILdmr"
        },
        {
          "description": "Dirty miss because of data read (--simulate-wb=yes)",
          "type": "string",
          "const": "DLdmr"
        },
        {
          "description": "Dirty miss because of data write (--simulate-wb=yes)",
          "type": "string",
          "const": "DLdmw"
        },
        {
          "description": "Counter showing bad temporal locality for L1 caches (--cachuse=yes)",
          "type": "string",
          "const": "AcCost1"
        },
        {
          "description": "Counter showing bad temporal locality for LL caches (--cachuse=yes)",
          "type": "string",
          "const": "AcCost2"
        },
        {
          "description": "Counter showing bad spatial locality for L1 caches (--cachuse=yes)",
          "type": "string",
          "const": "SpLoss1"
        },
        {
          "description": "Counter showing bad spatial locality for LL caches (--cachuse=yes)",
          "type": "string",
          "const": "SpLoss2"
        }
      ]
    },
    "FlamegraphSummary": {
      "description": "The callgrind `FlamegraphSummary` records all created paths for an [`EventKind`] specific\n flamegraph\n\n Either the `regular_path`, `old_path` or the `diff_path` are present. Never can all of them be\n absent.",
      "type": "object",
      "properties": {
        "base_path": {
          "description": "If present, the path to the file of the old regular (non-differential) flamegraph",
          "type": ["string", "null"]
        },
        "diff_path": {
          "description": "If present, the path to the file of the differential flamegraph",
          "type": ["string", "null"]
        },
        "event_kind": {
          "description": "The `EventKind` of the flamegraph",
          "allOf": [
            {
              "$ref": "#/definitions/EventKind"
            }
          ]
        },
        "regular_path": {
          "description": "If present, the path to the file of the regular (non-differential) flamegraph",
          "type": ["string", "null"]
        }
      },
      "required": ["event_kind"]
    },
    "MetricsDiff": {
      "description": "The `MetricsDiff` describes the difference between a `new` and `old` metric as percentage and\n factor.\n\n Only if both metrics are present there is also a `Diffs` present. Otherwise, it just stores the\n `new` or `old` metric.",
      "type": "object",
      "properties": {
        "diffs": {
          "description": "If both metrics are present there is also a `Diffs` present",
          "anyOf": [
            {
              "$ref": "#/definitions/Diffs"
            },
            {
              "type": "null"
            }
          ]
        },
        "metrics": {
          "description": "Either the `new`, `old` or both metrics",
          "allOf": [
            {
              "$ref": "#/definitions/EitherOrBoth_for_uint64"
            }
          ]
        }
      },
      "required": ["metrics"]
    },
    "MetricsSummary_for_DhatMetricKind": {
      "description": "The `MetricsSummary` contains all differences between two tool run segments",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/MetricsDiff"
      }
    },
    "MetricsSummary_for_ErrorMetricKind": {
      "description": "The `MetricsSummary` contains all differences between two tool run segments",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/MetricsDiff"
      }
    },
    "MetricsSummary_for_EventKind": {
      "description": "The `MetricsSummary` contains all differences between two tool run segments",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/MetricsDiff"
      }
    },
    "SegmentDetails": {
      "description": "Some additional and necessary information about the tool run segment",
      "type": "object",
      "properties": {
        "command": {
          "description": "The executed command extracted from Valgrind output",
          "type": "string"
        },
        "details": {
          "description": "More details for example from the logging output of the tool run",
          "type": ["string", "null"]
        },
        "parent_pid": {
          "description": "The parent pid of this process",
          "type": ["integer", "null"],
          "format": "int32"
        },
        "part": {
          "description": "The part of this tool run (only callgrind)",
          "type": ["integer", "null"],
          "format": "uint64",
          "minimum": 0
        },
        "path": {
          "description": "The path to the file from the tool run",
          "type": "string"
        },
        "pid": {
          "description": "The pid of this process",
          "type": "integer",
          "format": "int32"
        },
        "thread": {
          "description": "The thread of this tool run (only callgrind)",
          "type": ["integer", "null"],
          "format": "uint",
          "minimum": 0
        }
      },
      "required": ["command", "pid", "path"]
    },
    "SummaryFormat": {
      "description": "The format (json, ...) in which the summary file should be saved or printed",
      "oneOf": [
        {
          "description": "The format in a space optimal json representation without newlines",
          "type": "string",
          "const": "Json"
        },
        {
          "description": "The format in pretty printed json",
          "type": "string",
          "const": "PrettyJson"
        }
      ]
    },
    "SummaryOutput": {
      "description": "Manage the summary output file with this `SummaryOutput`",
      "type": "object",
      "properties": {
        "format": {
          "description": "The [`SummaryFormat`]",
          "allOf": [
            {
              "$ref": "#/definitions/SummaryFormat"
            }
          ]
        },
        "path": {
          "description": "The path to the destination file of this summary",
          "type": "string"
        }
      },
      "required": ["format", "path"]
    },
    "ToolMetricSummary": {
      "description": "The `ToolMetricSummary` contains the `MetricsSummary` distinguished by tool and metric kinds",
      "oneOf": [
        {
          "description": "If there are no metrics extracted (currently massif, bbv)",
          "type": "string",
          "const": "None"
        },
        {
          "description": "The error summary of tools which reports errors (memcheck, helgrind, drd)",
          "type": "object",
          "properties": {
            "ErrorSummary": {
              "$ref": "#/definitions/MetricsSummary_for_ErrorMetricKind"
            }
          },
          "additionalProperties": false,
          "required": ["ErrorSummary"]
        },
        {
          "description": "The dhat summary",
          "type": "object",
          "properties": {
            "DhatSummary": {
              "$ref": "#/definitions/MetricsSummary_for_DhatMetricKind"
            }
          },
          "additionalProperties": false,
          "required": ["DhatSummary"]
        },
        {
          "description": "The callgrind summary",
          "type": "object",
          "properties": {
            "CallgrindSummary": {
              "$ref": "#/definitions/MetricsSummary_for_EventKind"
            }
          },
          "additionalProperties": false,
          "required": ["CallgrindSummary"]
        }
      ]
    },
    "ToolRun": {
      "description": "The `ToolRun` contains all information about a single tool run with possibly multiple segments\n\n The total is always present and summarizes all tool run segments. In the special case of a\n single tool run segment, the total equals the metrics of this segment.",
      "type": "object",
      "properties": {
        "segments": {
          "description": "All `ToolRunSegment`s",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ToolRunSegment"
          }
        },
        "total": {
          "description": "The total over the `ToolRunSegment`s",
          "allOf": [
            {
              "$ref": "#/definitions/ToolMetricSummary"
            }
          ]
        }
      },
      "required": ["segments", "total"]
    },
    "ToolRunSegment": {
      "description": "A single segment of a tool run and if present the comparison with the \"old\" segment\n\n A tool run can produce multiple segments, for example for each process and subprocess with\n (--trace-children).",
      "type": "object",
      "properties": {
        "details": {
          "description": "The details (like command, thread number etc.) about the segment(s)",
          "allOf": [
            {
              "$ref": "#/definitions/EitherOrBoth_for_SegmentDetails"
            }
          ]
        },
        "metrics_summary": {
          "description": "The `ToolMetricSummary`",
          "allOf": [
            {
              "$ref": "#/definitions/ToolMetricSummary"
            }
          ]
        }
      },
      "required": ["details", "metrics_summary"]
    },
    "ToolSummary": {
      "description": "The `ToolSummary` containing all information about a valgrind tool run",
      "type": "object",
      "properties": {
        "log_paths": {
          "description": "The paths to the `*.log` files. All tools produce at least one log file",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "out_paths": {
          "description": "The paths to the `*.out` files. Not all tools produce an output in addition to the log\n files",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "summaries": {
          "description": "The metrics and details about the tool run",
          "allOf": [
            {
              "$ref": "#/definitions/ToolRun"
            }
          ]
        },
        "tool": {
          "description": "The Valgrind tool like `DHAT`, `Memcheck` etc.",
          "allOf": [
            {
              "$ref": "#/definitions/ValgrindTool"
            }
          ]
        }
      },
      "required": ["tool", "log_paths", "out_paths", "summaries"]
    },
    "ValgrindTool": {
      "description": "All currently available valgrind tools",
      "type": "string",
      "enum": [
        "Callgrind",
        "Memcheck",
        "Helgrind",
        "DRD",
        "Massif",
        "DHAT",
        "BBV"
      ]
    }
  }
}
